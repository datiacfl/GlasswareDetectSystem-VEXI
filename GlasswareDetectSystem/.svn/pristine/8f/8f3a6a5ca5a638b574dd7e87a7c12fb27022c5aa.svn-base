#include "Widget_CarveSetting.h"
#include "glasswaredetectsystem.h"
#include <QScrollArea>
extern GlasswareDetectSystem *pMainFrm;

myPushButton::myPushButton(QWidget *parent)
	: QPushButton(parent)
{

}
myPushButton::~myPushButton()
{

}

WidgetCarveSetting::WidgetCarveSetting(QWidget *parent)
	: QWidget(parent)
{

	//pTabCarve = new QTabWidget(this);
	pStackedCarve = new QStackedWidget(this);
	image_widget = new ImageWidget(this);
	errorList_widget = new CErrorImageList(this);
// 	QFont font;
//	font.setPointSize(16);
// 	pStackedCarve->setFont(font);

	for (int i = 0;i<pMainFrm->m_sSystemInfo.iCamCount;i++)
	{
		widgetCarveImage = new Widget_CarveImage;
		widgetCarveImage->init(i);
		listWidgetCarveImage.append(widgetCarveImage);
// 		QFont font;
// 		font.setPointSize(12);
// 		widgetCarveImage->setFont(font);
		pStackedCarve->addWidget(widgetCarveImage);//,tr(QString("Camera %1").arg(i+1)));
 		connect(pMainFrm->pdetthread[i],SIGNAL(signals_updateActiveImg(int,int,double,int)),widgetCarveImage,SLOT(slots_updateActiveImg(int,int,double,int)));
		if(2 == pMainFrm->m_sCarvedCamInfo[i].m_iStress)
		{
 			connect(pMainFrm->pdetthread[pMainFrm->m_sCarvedCamInfo[i].m_iToNormalCamera],SIGNAL(signals_updateActiveImg(int,int,double,int)),widgetCarveImage,SLOT(slots_updateActiveImg(int,int,double,int)));
		}

		connect(widgetCarveImage->buttonList,SIGNAL(clicked()),this,SLOT(slots_showErrorList()));
		connect(widgetCarveImage,SIGNAL(signals_showPic(int)),image_widget,SLOT(slots_imageItemDoubleClick(int )));
		//connect(widgetCarveImage,SIGNAL(signals_showPic(int)),image_widget,SLOT(slots_showOnlyCamera(int )));
	}

	//connect(errorList_widget->buttonCarve,SIGNAL(clicked()),this,SLOT(slots_showCarveSet()));

	buttonGroupCamera  = new QButtonGroup(this);

	//QHBoxLayout*hLayout = new QHBoxLayout;
	//QHBoxLayout*hLayout2 = new QHBoxLayout;
	QGridLayout *GridLayout = new QGridLayout;

	if (4 > pMainFrm->m_sSystemInfo.iCamCount)
	{
		for (int i = 0;i<pMainFrm->m_sSystemInfo.iCamCount;i++)
		{
			myPushButton *pushButton_carvePage = new myPushButton(this);
			pushButton_carvePage->setObjectName("toolButtonCamera");
			//QPixmap pixmap = QPixmap(":/toolButton/green");
// 			pushButton_carvePage->setFlat(true);
			//pushButton_carvePage->setPixmap(pixmap);
			pushButton_carvePage->setText(QString::number(i+1));
			pushButton_carvePage->setStyleSheet("background-color:gray");
			buttonGroupCamera->addButton(pushButton_carvePage,i);
// 			hLayout->addWidget(pushButton);
			GridLayout->addWidget(pushButton_carvePage,0,i);
		}
	}
	else
	{
		for (int i = 0;i<pMainFrm->m_sSystemInfo.iCamCount;i++)
		{
			myPushButton *pushButton_carvePage = new myPushButton(this);
			pushButton_carvePage->setObjectName("toolButtonCamera");
// 			QPixmap pixmap = QPixmap(":/toolButton/green");
// 			pushButton_carvePage->setFlat(true);
			pushButton_carvePage->setText(QString::number(i+1));
			pushButton_carvePage->setStyleSheet("background-color:gray");
			buttonGroupCamera->addButton(pushButton_carvePage,i);
			
			if (0 == pMainFrm->m_sSystemInfo.m_iImageStyle)
			{
				GridLayout->addWidget(pushButton_carvePage,i%2,i/2);
			}
			else if (1 == pMainFrm->m_sSystemInfo.m_iImageStyle)
			{
				if (i < (pMainFrm->m_sSystemInfo.iCamCount+1)/2)
				{
					GridLayout->addWidget(pushButton_carvePage,0,i);
				}
				else
				{
					GridLayout->addWidget(pushButton_carvePage,1,i - (pMainFrm->m_sSystemInfo.iCamCount+1)/2);
				}
			}
		}
	}
	
	setWidget = new QWidget(this);
	setWidget->setMaximumWidth(400);
	QVBoxLayout* vLayout = new QVBoxLayout(setWidget);
	vLayout->addWidget(pStackedCarve);
	vLayout->addLayout(GridLayout);
	vLayout->setSpacing(0);
	vLayout->setContentsMargins(0, 0, 0, 0);
	
	listWidget = new QWidget(this);
	QScrollArea *scrollArea = new QScrollArea(listWidget);
//	listWidget->setMaximumWidth(300);
	QVBoxLayout* vLayout1 = new QVBoxLayout(listWidget);
	vLayout1->addWidget(scrollArea);
	vLayout1->setSpacing(0);
	vLayout1->setContentsMargins(0,0,0,0  );
	QVBoxLayout* vLayout2 = new QVBoxLayout(scrollArea);
	vLayout2->addWidget(errorList_widget);
	vLayout2->setSpacing(0);
	vLayout2->setContentsMargins(5,5,5,5);	
	
	splitter = new QSplitter;

//	splitter->addWidget(setWidget);
	splitter->addWidget(image_widget);
	splitter->addWidget(listWidget);
	
	main_layout = new QHBoxLayout();
	main_layout->addWidget(setWidget);
	main_layout->addWidget(splitter);
	main_layout->setSpacing(0);
	main_layout->setContentsMargins(0, 0, 0, 0);

	setLayout(main_layout); 

	//connect(expandButton,SIGNAL(clicked()),this,SLOT(slots_changeButtonMode()));
	connect(buttonGroupCamera,SIGNAL(buttonClicked(int)),this,SLOT(slots_turnCameraPage(int)));

	//pStackedCarve->setVisible(false);
	iButtonMode = 0;

	QDesktopWidget* desktopWidget = QApplication::desktop();
	QRect screenRect = desktopWidget->screenGeometry();
	int width = screenRect.width();

 	listSplitter.append((width-300));
 	listSplitter.append(300);
  	splitter->setSizes(listSplitter);

	setWidget->setVisible(false);
	slots_turnCameraPage(0);
	buttonGroupCamera->button(0)->setText(QString("*%1").arg(1));
	buttonGroupCamera->button(0)->setStyleSheet("background-color:green");

	connect(image_widget,SIGNAL(signals_showCarve()),this,SLOT(slots_showCarve()));
	connect(image_widget,SIGNAL(signals_hideCarve()),this,SLOT(slots_hideCarve()));
}

WidgetCarveSetting::~WidgetCarveSetting()
{

}
void WidgetCarveSetting::slots_intoWidget()
{
	errorList_widget->IntoWidget();
	image_widget->slots_intoWidget();
  	//for (int i = 0;i<pMainFrm->m_sSystemInfo.iCamCount;i++)
  	//{
  	//	connect(pMainFrm->pdetthread[i],SIGNAL(signals_updateActiveImg(int,int,double,int)),widgetCarveImage,SLOT(slots_updateActiveImg(int,int,double,int)));
  	//}

}
bool WidgetCarveSetting::leaveWidget()
{
  	//for (int i = 0;i<pMainFrm->m_sSystemInfo.iCamCount;i++)
  	//{
  	//	disconnect(pMainFrm->pdetthread[i],SIGNAL(signals_updateActiveImg(int,int,double,int)),widgetCarveImage,SLOT(slots_updateActiveImg(int,int,double,int)));
  	//}

	if (!image_widget->leaveWidget())
	{
		return false;
	}
	if (!errorList_widget->leaveWidget())
	{
		return false;
	}
	return true;
}

void WidgetCarveSetting::slots_changeButtonMode()
{
	if (0 == iButtonMode)
	{
		QPixmap pixmap(":/sysButton/hide");
		expandButton->setIcon(pixmap);

		pStackedCarve->setVisible(true);
		setLayout(main_layout);
		iButtonMode = 1;
	}
	else
	{
		QPixmap pixmap(":/sysButton/expand");
		expandButton->setIcon(pixmap);

		pStackedCarve->setVisible(false);
		setLayout(main_layout);
		iButtonMode = 0;
	}
}
void WidgetCarveSetting::slots_turnCameraPage(int index)
{
// 	if (pStackedCarve->currentIndex() == index)
// 	{
// 		return;
// 	}
	Widget_CarveImage *tempCarveiamge = dynamic_cast<Widget_CarveImage *>(pStackedCarve->widget(pStackedCarve->currentIndex()));
	if (tempCarveiamge->bIsTestMode)
	{
		if (QMessageBox::Yes == QMessageBox::question(this,tr("tip"),
			tr("Testing,do you want to stop test?"),QMessageBox::Yes | QMessageBox::No))
		{
			tempCarveiamge->slots_startTest();
		}
		else{
			return;
		}
			
		//QMessageBox::information(this,tr("Warning"),tr("Please Stop test first!"));
	}
	buttonGroupCamera->button(pStackedCarve->currentIndex())->setStyleSheet("background-color:gray");
	buttonGroupCamera->button(pStackedCarve->currentIndex())->setText(QString("%1").arg(pStackedCarve->currentIndex()+1));
	
	pStackedCarve->setCurrentIndex(index);
	buttonGroupCamera->button(index)->setText(QString("*%1").arg(index+1));
	buttonGroupCamera->button(index)->setStyleSheet("background-color:green");

	//更新剪切信息
 	tempCarveiamge = dynamic_cast<Widget_CarveImage *>(pStackedCarve->widget(index));
	tempCarveiamge->slots_readDelayPara();
//	Widget_CarveImage *tempCarveiamge = (Widget_CarveImage *)(pStackedCarve->widget(index));
	Widget_CarveInfo *tempCarveInfo = tempCarveiamge->pWidgetCarveInfo;
	if (2 == pMainFrm->m_sCarvedCamInfo[index].m_iStress)
	{
		tempCarveInfo->ui.radioButton_Stress->setChecked(true);
		tempCarveInfo->ui.label_toNormal->setEnabled(true);
		tempCarveInfo->ui.spinBox_toNormal->setEnabled(true);
		tempCarveInfo->ui.spinBox_toNormal->setValue(pMainFrm->m_sCarvedCamInfo[index].m_iToNormalCamera+1);
	}
	else
	{
		tempCarveInfo->ui.radioButton_Normal->setChecked(true);
		tempCarveInfo->ui.label_toNormal->setEnabled(false);
		tempCarveInfo->ui.spinBox_toNormal->setEnabled(false);
	}
	tempCarveInfo->ui.spinBox_realNo->setValue(pMainFrm->m_sCarvedCamInfo[index].m_iToRealCamera+1);
	tempCarveInfo->ui.spinBox_Ro->setValue(pMainFrm->m_sCarvedCamInfo[index].m_iImageAngle);

	//更新相机信息
	tempCarveInfo->ui.comboBox_triggerType->setCurrentIndex(pMainFrm->m_sRealCamInfo[index].m_iTrigger);
	
	tempCarveInfo->ui.spinBox_exposureTime->setValue(pMainFrm->m_sRealCamInfo[index].m_iShuter);
	tempCarveiamge->slots_updateActiveImg(index);
// 	widgetCarveImage->spinBox_X->setValue(widgetCarveImage->topPoint.x());
// 	widgetCarveImage->spinBox_Y->setValue(widgetCarveImage->topPoint.y());
// 	widgetCarveImage->spinBox_W->setValue(widgetCarveImage->buttomPoint.x() - widgetCarveImage->topPoint.x());
// 	widgetCarveImage->spinBox_H->setValue(widgetCarveImage->buttomPoint.y() - widgetCarveImage->topPoint.y());

	tempCarveiamge->intoWidget();
}
void WidgetCarveSetting::slots_showErrorList()
{

}

void WidgetCarveSetting::slots_showCarve()
{
	setWidget->setVisible(true);

}
void WidgetCarveSetting::slots_hideCarve()
{
	setWidget->setVisible(false);

}
